// Generated by CoffeeScript 1.9.3

/*
 supActions

 Author : Redy Ru
 Email : redy.ru@gmail.com
 License : 2014 MIT
 Version 1.0.0
 */

(function() {
  angular.module('supActions', []).directive("draggable", [
    "$document", function($document) {
      return function(scope, element) {
        var mousemove, mouseup, startX, startY, x, y;
        mousemove = function(event) {
          var x, y;
          y = event.screenY - startY;
          x = event.screenX - startX;
          element.css({
            top: y + "px",
            left: x + "px"
          });
        };
        mouseup = function() {
          $document.off("mousemove", mousemove);
          $document.off("mouseup", mouseup);
        };
        startX = 0;
        startY = 0;
        x = 200;
        y = 60;
        element.css({
          top: y + "px",
          left: x + "px",
          cursor: "pointer"
        });
        return element.on("mousedown", function(event) {
          startX = event.screenX - x;
          startY = event.screenY - y;
          $document.on("mousemove", mousemove);
          return $document.on("mouseup", mouseup);
        });
      };
    }
  ]).directive("focus", [
    '$timeout', function($timeout) {
      return {
        restrict: "EA",
        scope: {
          trigger: "="
        },
        link: function(scope, element) {
          return scope.$watch("trigger", function(value) {
            if (value) {
              return $timeout((function() {
                element[0].focus();
                scope.trigger = false;
              }), 500);
            }
          });
        }
      };
    }
  ]).directive("clickOutside", [
    '$document', function($document) {
      return {
        restrict: "A",
        scope: {
          clickOutside: "&"
        },
        link: function(scope, elem, attr) {
          var classList;
          if (attr.outsideIfNot !== void 0) {
            classList = attr.outsideIfNot.replace(", ", ",").split(",");
          } else {
            classList = [];
          }
          if (attr.id !== void 0) {
            classList.push(attr.id);
          }
          return $document.on("click", function(e) {
            var classNames, element, i, id;
            if (!e.target) {
              return;
            }
            element = e.target;
            while (element) {
              id = element.id;
              classNames = element.className;
              if (id !== void 0) {
                i = 0;
                while (i < classList.length) {
                  if (id.indexOf(classList[i]) > -1 || classNames.indexOf(classList[i]) > -1) {
                    return;
                  }
                  i++;
                }
              }
              element = element.parentNode;
            }
            return scope.$eval(scope.clickOutside);
          });
        }
      };
    }
  ]);

}).call(this);
